import { useState, useCallback, useEffect } from 'react'
import Head from 'next/head'
import Image from 'next/image'

import Web3 from 'web3'

import styles from '../styles/Home.module.css'
import abiToken from "./abi.json"

export default function Home() {
  const [isConnectedWeb3, setIsConnectedWeb3] = useState(false)
  const [accounts, setAccounts] = useState([])
  const [balance, setBalance] = useState(0)
  const [web3] = useState(new Web3(Web3.givenProvider || "ws://localhost:8545"))
  const [weiToSend, setWeiToSend] = useState(0)
  const [addressToSend, setAddressToSend] = useState("")
  const [providerName, setProviderName] = useState("")
  const [nameERC20, setNameERC20] = useState("")
  const [balanceERC20, setBalanceERC20] = useState("")
  const [totalSupplyERC20, setTotalSupplyERC20] = useState(0)
  const [symbolERC20, setSymbolERC20] = useState("")
  const [tokenToSend, setTokenToSend] = useState(0)
  const [tokenReceiptaddress, setTokenReceiptaddress] = useState("")
  const [tokenAddress, setTokenAddress] = useState("")

  const connectToWeb3 = useCallback(
    async () => {
      if(window.ethereum) {
        try {
          await window.ethereum.request({method: 'eth_requestAccounts'})

          setIsConnectedWeb3(true)
        } catch (err) {
          console.error(err)
        }
      } else {
        alert("Install Metamask")
      }
    }
  )

  useEffect(() => {
    const displayAccConnect =  () => alert("connect")
    const displayChainChanged =  () => alert("chainChanged")
    const displayAccChanged =  () => {
    const getAccounts = async () => setAccounts(await web3.eth.getAccounts())

    const acc = getAccounts()

    if(acc.length == 0)
      setIsConnectedWeb3(false)
    }
    const displayNetworkChanged =  () => alert("networkChanged")

    window.ethereum.on('connect', displayAccConnect)
    window.ethereum.on('chainChanged', displayChainChanged)
    window.ethereum.on('accountsChanged', displayAccChanged)
    window.ethereum.on('networkChanged', displayNetworkChanged)

    return () => {
      if (window.ethereum.removeListener) {
        window.ethereum.removeListener('connect', displayAccConnect)
        window.ethereum.removeListener('chainChanged', displayAccChanged)
        window.ethereum.removeListener('accountsChanged', displayAccChanged)
        window.ethereum.removeListener('networkChanged', displayNetworkChanged)
      }
    }
  }, [])


  useEffect(() => {
    const getAccounts = async () => setAccounts(await web3.eth.getAccounts())
    const getBalance = async () => {
      const balanceWEI = web3.eth.getBalance(accounts[0])
      setBalance( web3.utils.fromWei((await balanceWEI).toString(),'Ether'))
    }

    const getProviderName = async () => setProviderName(await web3.eth.net.getNetworkType())

    if (accounts.length == 0) getAccounts()
    if (accounts.length > 0) getBalance()
    if (accounts.length > 0) getProviderName()
    }, 
    [isConnectedWeb3]
  )

  const sendEth = useCallback(
    async () => {
      await web3.eth.sendTransaction({ 
        from: accounts[0], 
        to: addressToSend, 
        value: web3.utils.toWei(weiToSend, 'ether')})
    },
    [accounts, addressToSend, weiToSend]
  )

  useEffect(() => {
    if(tokenAddress !== "") {
      const contract = new web3.eth.Contract(abiToken, tokenAddress)

    const getER20Info = async () => {
      try {
        const name = await contract.methods.name().call({from : accounts[0]})
        const symbol = await contract.methods.symbol().call({from : accounts[0]})
        const balance = web3.utils.fromWei(await contract.methods.balanceOf(accounts[0]).call({from : accounts[0]}))
        const TotalSupply = web3.utils.fromWei(await contract.methods.totalSupply().call({from : accounts[0]}))
  
        setNameERC20(name)
        setSymbolERC20(symbol)
        setBalanceERC20(balance)
        setTotalSupplyERC20(TotalSupply)
      }
      catch (error){
        alert("the contract address is not valid")
      }
      
    }

    getER20Info()
  }
 }, [isConnectedWeb3, tokenAddress, accounts])

 const sendToken = () => {
    const contract = new web3.eth.Contract(abiToken, tokenAddress)
    
    const sendErc20 = async () => {
      try {
        const receipt = await contract.methods.transfer(tokenReceiptaddress, web3.utils.toWei(tokenToSend, 'ether')).send({from: accounts[0]})
      } catch (error) {
        alert("alert send")
      }
    }

    sendErc20()
  }


  return (
    <div className={styles.container}>
      <Head>
        <title>Web3 token</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        
        <h1> Wallet dApp </h1>
        
        <div className={styles.provider}>
          <p className={styles.providerName}>{providerName} 
            {
              isConnectedWeb3
                ? <a href={`https://${providerName}.etherscan.io/address/${accounts[0]}`} target="_blank"><img src="https://etherscan.io/images/brandassets/etherscan-logo-circle.png" alt='Etherscan' className={styles.imgEth}></img></a>
                : <img src="https://ethereum.org/static/a183661dd70e0e5c70689a0ec95ef0ba/31987/eth-diamond-purple.png" alt="logo_ethereum" className={styles.logo}></img>
            }
            </p>
          
          {
            isConnectedWeb3
              ? <p><img src="https://cdn.worldvectorlogo.com/logos/metamask.svg" alt="logo_metamask" className={styles.logo}></img></p>
              : <button onClick={connectToWeb3} className={styles.button}>Connect to web3</button>
          }
        </div>

        <div className={styles.sendEth}>
          <p>Amount Ethers : {balance} Eth</p>
          <div><label>Address :</label> <input type="text" onChange={e => setAddressToSend(e.target.value)} placeholder="address" /></div>
          <div><label>Amount :</label> <input type="number" onChange={e => setWeiToSend(e.target.value)} placeholder="Eth" /></div>
          <button onClick={sendEth} className={styles.button}>Envoyer</button>
        </div>

        <div className={styles.sendEth}>
          <p>Amount {nameERC20} : {balanceERC20} {symbolERC20} (total supply : {totalSupplyERC20}) </p>
          <div><label>Address ERC20:</label><input type="text" onChange={e => setTokenAddress(e.target.value)} /></div>
          <div><label>Address :</label> <input type="text" onChange={e => setTokenReceiptaddress(e.target.value)} placeholder="address" /></div>
          <div><label>Amount :</label> <input type="number" onChange={e => setTokenToSend(e.target.value)} placeholder="token" /></div>
          <button onClick={sendToken} className={styles.button}>Envoyer</button>
        </div>
      </main>

      <footer className={styles.footer}>
        <p>Frédéric LE COIDIC</p>
        <a href="https://github.com/FredLC29/my-dapp-wallet" target="_blank"><img src="https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png" alt="GitHub" title="GitHub" className={styles.imgEth}>
        </img></a>
      </footer>
    </div>
  )
}
